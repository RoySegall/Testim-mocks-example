"use strict";(self.webpackChunktestim_mocks_examples=self.webpackChunktestim_mocks_examples||[]).push([[93,878,714,362],{3163:function(e,n,t){t.r(n);var o=t(3069),a=t(7294),s=t(1182),i=t(4974),c=t(445);n.default=function(){return a.createElement(o.Z,{codes:{javascript:s.default,php:i.default,python:c.default},filename:"get-joke-mock"})}},1182:function(e,n,t){t.r(n),n.default='\nconst axios = require(\'axios\');\nconst {getJoke} = require(\'../get-joke\');\njest.mock(\'axios\');\n\ndescribe(\'Get joke\', () => {\n    let requestMock = jest.fn();\n\n    beforeAll(() => {\n        axios.request.mockImplementationOnce(requestMock);\n    });\n\n    it(\'Should return a joke number and invoke with the correct values\', async () => {\n        requestMock.mockResolvedValue({\n            data: {\n                body: [{\n                    setup: \'Why Was Six Afraid of Seven\',\n                    punchline: \'Because Seven ate Nine!\'\n                }]\n            }\n        });\n\n        const joke = await getJoke();\n        expect(joke).toBe(\'Your dad joke is: Why Was Six Afraid of Seven - Because Seven ate Nine!\');\n        expect(requestMock).toBeCalledTimes(1);\n        expect(requestMock).toBeCalledWith({\n            "method": "GET",\n            "url": "https://dad-jokes.p.rapidapi.com/random/joke",\n            "headers": {\n                "x-rapidapi-host": "dad-jokes.p.rapidapi.com",\n                "x-rapidapi-key": "your_key",\n            },\n        });\n    });\n});\n'},4974:function(e,n,t){t.r(n),n.default="\nclass getJokeTest extends TestCase {\n\n  public function testGetJoke(): void {\n    $jsonContents = json_encode([\n      'body' => [[\n        'setup' => 'Why Was Six Afraid of Seven',\n        'punchline' => 'Because Seven ate Nine!',\n      ]]\n    ]);\n    $response = new Response(200, ['Content-Type' => 'application/json'],\n      $jsonContents\n    );\n\n    $clientMock = $this->getMockBuilder(Client::class)->getMock();\n    $clientMock->method('get')->willReturn($response);\n\n    $dadJokeService = new DadJokeService();\n    $dadJokeService->client = $clientMock;\n    $this->assertEquals(\n      $dadJokeService->getJoke(),\n      'Your dad joke is: Why Was Six Afraid of Seven - Because Seven ate Nine!'\n    );\n  }\n}\n"},445:function(e,n,t){t.r(n),n.default="\nfrom unittest.mock import patch\nfrom .utils import get_joke\n\n\n@patch('requests.get')\ndef test_foo(mock_api_call):\n    mock_api_call.return_value.json.return_value = {\n        'body': [{\n            'setup': 'Why Was Six Afraid of Seven',\n            'punchline': 'Because Seven ate Nine!'\n        }]\n    }\n    assert 'Your dad joke is: Why Was Six Afraid of Seven - Because Seven ate Nine!' == get_joke()\n"}}]);
//# sourceMappingURL=component---src-pages-get-joke-mock-index-js-1c9d9bbbdeb1654b2cf4.js.map